global
// JavaScript code
function gen_matrix(nrow, ncol) {
	let results = "\n";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			results += "$" +(order ).toString() + " & ";
			order ++;
		}
		results += " $"+(order).toString() +" \\\\"+ "\\"+ "\n";
		order ++;
	}
	return results;
}

function gen_table(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow-1; i++){
		for(var j = 0;j <ncol-1;j++){
			results += "$" +(order+3).toString() + " & ";
			order ++;
		}
		results += " $"+(order+3).toString() +" \\\\"+ "\\"+ "\n";
		order ++;
		if(i == 0){
			results += "		\\midrule" + "\n";
		}
		results += "			";
	}
	for(var j = 0;j <ncol-1;j++){
		results += "$" +(order+3).toString() + " & ";
		order ++;
	}
	results += " $"+(order+3).toString() +" \\\\"+ "\\";
	return results;
}

function gen_array(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow-1; i++){
		for(var j = 0;j <ncol-1;j++){
			results += "$" +(order).toString() + " & ";
			order ++;
		}
		results += " $"+(order).toString() +" \\\\"+ "\\"+ "\n" + "	";
		order ++;
	}
	for(var j = 0;j <ncol-1;j++){
		results += "$" +(order).toString() + " & ";
		order ++;
	}
	results += " $"+(order).toString() +" \\\\"+ "\\";
	return results;
}
endglobal

snippet `table([1-9]{1})\ ([1-9]{1})` "Table environment" bA
\begin{table}[H]
	\centering
	\begin{tabular}{``
	let len = m[2];
	let results = "";
	for(var i=0; i<len-1; i++){
		results += "c|"
	}
	results += "c";
	rv = results;
	``}
	    \toprule
			``
			rv = gen_table(m[1], m[2])
			``
    	\bottomrule
	\end{tabular}
	\caption{${2:caption}}
	\label{tab:${3:label}}
\end{table}
endsnippet

priority 2000
snippet `(b|p)mat([1-9]{1})\ ([1-9]{1})` "matrix" iwAm
\begin{``rv = m[1]``matrix}``
	rv = gen_matrix(m[2],m[3]);
	``\end{``rv = m[1]``matrix}$0
endsnippet

snippet cvec "column vector" iAm
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots \\\\ $1_${3:n} \end{pmatrix}$0
endsnippet

snippet rvec "row vector" iAm
\begin{pmatrix} ${1:x}_${2:1}, \ldots ,$1_${3:n} \end{pmatrix}$0
endsnippet

snippet `ary([1-9]{1})\ ([1-9]{1})` "Array environment" ibAm
\begin{array}{``
	let len = m[2];
	let results = "";
	for(var i=0; i<len; i++){
		results += "c"
	}
	rv = results;
	``}
	``
	rv = gen_array(m[1], m[2])
	``
\end{array}
endsnippet

snippet %-- "------" wA
%────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
$0
endsnippet

snippet `(?<![\\a-zA-Z]);m` "\mu" wAm
\mu $0
endsnippet

snippet `(?<![\\a-zA-Z]);a` "\alpha" wAm
\alpha $0
endsnippet

snippet `(?<![\\a-zA-Z]);s` "\sigma" wAm
\sigma $0
endsnippet
snippet `(?<![\\a-zA-Z]);S` "\Sigma" wAm
\Sigma $0
endsnippet

snippet `(?<![\\a-zA-Z]);r` "\rho" wAm
\rho $0
endsnippet

snippet `(?<![\\a-zA-Z]);b` "\beta" wAm
\beta $0
endsnippet

snippet `(?<![\\a-zA-Z]);g` "\gamma" wAm
\gamma $0
endsnippet
snippet `(?<![\\a-zA-Z]);G` "\Gamma" wAm
\Gamma $0
endsnippet

snippet `(?<![\\a-zA-Z]);d` "\delta" wAm
\delta $0
endsnippet
snippet `(?<![\\a-zA-Z]);D` "\Delta" wAm
\Delta $0
endsnippet

snippet `(?<![\\a-zA-Z]);z` "\zeta" wAm
\zeta $0
endsnippet

snippet `(?<![\\a-zA-Z]);e` "\eta" wAm
\eta $0
endsnippet

snippet `(?<![\\a-zA-Z]);t` "\theta" wAm
\theta $0
endsnippet
snippet `(?<![\\a-zA-Z]);vt` "\vartheta" wAm
\vartheta $0
endsnippet

snippet `(?<![\\a-zA-Z]);T` "\Theta" wAm
\Theta $0
endsnippet

snippet `(?<![\\a-zA-Z]);i` "\iota" wAm
\iota $0
endsnippet

snippet `(?<![\\a-zA-Z]);k` "\kappa" wAm
\kappa $0
endsnippet

snippet `(?<![\\a-zA-Z]);l` "\lambda" wAm
\lambda $0
endsnippet
snippet `(?<![\\a-zA-Z]);L` "\Lambda" wAm
\Lambda $0
endsnippet

snippet `(?<![\\a-zA-Z]);n` "\nu" wAm
\nu $0
endsnippet

priority 200
snippet `(?<![\\a-zA-Z]);;n` "\nabla" iAm
\nabla $0
endsnippet

snippet `(?<![\\a-zA-Z]);p` "\pi" wAm
\pi $0
endsnippet

snippet `(?<![\\a-zA-Z]);P` "\Pi" wAm
\Pi $0
endsnippet

snippet `(?<![\\a-zA-Z]);r` "\rho" wAm
\rho $0
endsnippet

snippet `(?<![\\a-zA-Z]);t` "\tau" wAm
\tau $0
endsnippet

snippet `(?<![\\a-zA-Z]);u` "\upsilon" wAm
\upsilon $0
endsnippet
snippet `(?<![\\a-zA-Z]);U` "\Upsilon" wAm
\Upsilon $0
endsnippet

snippet `(?<![\\a-zA-Z]);p` "\phi" wAm
\phi $0
endsnippet
snippet `(?<![\\a-zA-Z]);P` "\Phi" wAm
\Phi $0
endsnippet

snippet `(?<![\\a-zA-Z]);vp` "\varphi" wAm
\varphi $0
endsnippet

snippet `(?<![\\a-zA-Z]);c` "\chi" wAm
\chi $0
endsnippet

priority 200
snippet `(?<![\\a-zA-Z]);;p` "\psi" wAm
\psi $0
endsnippet
priority 200
snippet `(?<![\\a-zA-Z]);;P` "\Psi" wAm
\Psi $0
endsnippet

snippet `(?<![\\a-zA-Z]);o` "\omega" wAm
\omega $0
endsnippet
snippet `(?<![\\a-zA-Z]);O` "\Omega" wAm
\Omega $0
endsnippet

snippet eps "\epsilon" iAm
\epsilon $0
endsnippet
snippet veps "\vepsilon" iAm
\varepsilon $0
endsnippet

priority 100
snippet `(?<![\\a-zA-Z])ell` "\ell" iAwm
\\ell $0
endsnippet

snippet // "Fraction" iAm
\\frac{$1}{$2}$0
endsnippet

snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" Am
\frac{``rv = m[1]``}{$1}$0
endsnippet

snippet `^.*\)/` "Fraction with ()" Am
``
    let str = m[0];
    str = str.slice(0, -1);
    let lastIndex = str.length - 1;

    let depth = 0;
    let i = str.length - 1;

    while (true) {
        if (str[i] == ')') depth += 1;
        if (str[i] == '(') depth -= 1;
        if (depth == 0) break;
        i -= 1;
    }

    let results = str.slice(0, i) + "\\frac{" + str.slice(i+1, -1) + "}";
    results += "{$1}$0";
    rv = results;
    ``
endsnippet

snippet `(>=|(?<!\\)geq)` "greater or equal to" iAm
\geq $0
endsnippet

snippet `(<=|(?<!\\)leq)` "less or equal to" iAm
\leq $0
endsnippet

snippet `(!=|(?<!\\)neq)` "not equal" iAm
\neq $0
endsnippet

snippet == "constan equal" iAm
\equiv $0
endsnippet

snippet ~~ "approx. equal" iAm
\thickapprox $0
endsnippet

snippet ~= "approx. equal(2)" iAm
\cong $0
endsnippet

snippet ~- "approx. equal(3)" iAm
\simeq $0
endsnippet

snippet @> "inclusion" iAm
\hookrightarrow $0
endsnippet

snippet || "mid" iAm
 \mid $0
endsnippet

snippet `([a-zA-Z])\1` "subscript" iAm
_{``rv = m[1]``}$0
endsnippet

snippet `([A-Za-z\d)}])\_([A-Za-z\d\-+][A-Za-z\d-+])` "auto subscript" wAm
`` rv = m[1]``_{``rv = m[2]``$1}$0
endsnippet

priority 2000
snippet `([A-Za-z\d)}])\^([A-Za-z\d\-+][A-Za-z\d-+])` "auto supscript" wAm
`` rv = m[1]``^{``rv = m[2]``$1}$0
endsnippet

snippet `(\\?[a-zA-Z]\w*)(bar|BAR)` "Bar" iAm
\overline{``rv = m[1]``} $0
endsnippet

snippet `(\\?[a-zA-Z]\w*)(td|TD)` "tilde" iwAm
\widetilde{``rv = m[1]``} $0
endsnippet

snippet `(\\?[a-zA-Z]\w*)(hat|HAT)` "hat" iAm
\hat{``rv = m[1]``} $0
endsnippet

snippet `(\\?[a-zA-Z]\w*)(bf|BF)` "mathbf" iAm
\mathbf{``rv = m[1]``} $0
endsnippet

snippet `(\\?[a-zA-Z]\w*)(bm|BM)` "bm" iAm
\bm{``rv = m[1]``} $0
endsnippet

snippet `(\\?\w+)(,\.|\.,)` "Vector postfix" iAm
\vec{``rv = m[1]``} $0
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:H}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

priority 100
snippet ... "dots" iA
\ldots $0 
endsnippet

snippet => "implies" Aim
\implies $0
endsnippet

snippet =< "implied by" Aim
\impliedby $0
endsnippet

priority 200
snippet iff "if and only if" wAm
\iff $0
endsnippet

snippet fm "inline Math" wA
\(${1}\)``
let str = t[0];
let test = t[1][0];
if (test != ',' &&  test != '.' &&  test != '-' && test !='?' && test !=' '){
	rv = ' ';
}
else{
	rv = '';
}``$2
endsnippet

snippet dm "display Math" wA
\[
	${1}
\]$0
endsnippet

snippet lr< "<>" iAm
\left< $1 \right> $0
endsnippet

snippet ceil "ceil" iAm
\left\lceil $1 \right\rceil $0
endsnippet

snippet flr "floor" iAm
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet abs "abs value" iAm
\left\vert ${1} \right\vert $0
endsnippet

snippet norm "norm" iAm
\left\lVert $1\right\rVert $0
endsnippet

snippet sum "sum" wAm
\sum\limits_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

snippet `(?<!\\)cup` "union" wAm 
\cup $0
endsnippet

snippet Cup "Union" wAm
\bigcup\limits_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

snippet `(?<!\\)cap` "intersection" wAm 
\cap $0
endsnippet

snippet Cap "Intersection" wAm
\bigcap\limits_{${1:i}=${2:1}}^{${3:\infty}} $0
endsnippet

snippet taylor "taylor" wAm
\sum\limits_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" wAm
\lim\limits_{${1:n} \to ${2:\infty}} 
endsnippet

priority 200
snippet lsup "limsup" wm
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

priority 200
snippet linf "liminf" wm
\liminf_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" wAm
\prod\limits_{${1:n=${2:1}}}^{${3:\infty}} $0
endsnippet

snippet pd "d/dx" wAm
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

priority 200
snippet dif "d/dx" wAm
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}} $0
endsnippet

snippet sq "\sqrt{}" iAm
\sqrt{${1}} $0
endsnippet

priority 200
snippet oo "\infty" wAm
\infty 
endsnippet

priority 500
snippet `\^oo` "supscript ^\infty" iAm
^\infty $0
endsnippet

priority 200
snippet EE "exist" iAm
\exists 
endsnippet

priority 200
snippet AA "forall" iAm
\forall 
endsnippet

snippet `\b([a-zA-Z])n(\d)` "?[n+?]" iAm
``rv = m[1]``_{${1:n}+``rv = m[2]``}$0
endsnippet

snippet `(x\.|\.x)` "times" iAm
\times 
endsnippet

snippet case "cases" iwAm
\begin{dcases}
	$1, &\text{ if } $3 ;\\\\
	$2, &\text{ if } $4 .
\end{dcases}$0
endsnippet

priority 200
snippet DEFF "Big function" iwA
\[
	\begin{aligned}
	  	$1\colon $2 & \longrightarrow $3      \\\\
  		$4          & \longmapsto $1($4) = $5
	\end{aligned}
\]
$0
endsnippet

priority 200
snippet deff "Definition of function" iwA
\[
	$1\colon ${2:\\mathbb{R\}} \to ${3:\\mathbb{R\}}, ${4:x} \mapsto
\]
$0
endsnippet

snippet iid "independent and identical distribution" iAm
\overset{\text{i.i.d.}}{\sim} $0
endsnippet

snippet defe "define equal" wAm
\overset{\underset{\mathrm{def}}{}}{=} $0
endsnippet

snippet tet "text" iAm
\text{$1} $0
endsnippet

snippet tit "text it" i
\textit{$1} $0
endsnippet

priority 100
snippet ttt "text tt" iA
\texttt{$1} $0
endsnippet

snippet mtt "math tt" iAm
\mathtt{$1} $0
endsnippet

snippet sc "text sc" iAm
\textsc{$1} $0
endsnippet

snippet `(\\\\)([a-zA-Z])` iAm
\mathbb{\\MakeUppercase{``rv = m[2]``}} $0
endsnippet

snippet nin wAm
\notin $0
endsnippet

snippet invs "inverse" iAm
^{-1} $0
endsnippet

priority 200
snippet tr "transpose" iAwm
^{T} $0
endsnippet

snippet cp "complement" iAm
^{c} $0
endsnippet

snippet qs "square" iAm
^{2} $0
endsnippet

snippet -> "to" iAm
\to $0
endsnippet

snippet !> "mapsto" iAm
\mapsto $0
endsnippet

priority 200
snippet `dint` "integral" wAm
\int_{${1:-\infty}}^{${2:\infty}} ${3} \\,\mathrm{d}${4:x} $0
endsnippet

priority 200
snippet `(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|sin|cos|cot|csc|ln|log|exp|star|perp|inf|sup)` "general" wAm
\\``rv = m[1]`` $0
endsnippet

priority 100
snippet `(?<![\\a-zA-Z])(diag|rank|lcm|tr)` "matrix function" wAm
\\operatorname{``rv = m[1]``} $0
endsnippet

priority 300
snippet `(?<![\\a-zA-Z])arg(max|min)` "arg min/max" wAm
\underset{$1}{\mathop{\arg\\ \\``rv = m[1]``}} $0
endsnippet

priority 200
snippet `(?<!\\)(min|max)` "general" wAm
\mathop{\\``rv = m[1]``} $0
endsnippet

snippet ' "prime" wAm
^\prime $0
endsnippet

snippet -- "setminus" iAm
\setminus $0
endsnippet

priority 200
snippet mbb "mathbb" im
\mathbb{$1}$0
endsnippet

priority 200
snippet `([a-zA-Z])cal` "mathcal" iAwm
\mathcal{\\MakeUppercase{``rv = m[1]``}} $0
endsnippet

snippet `([a-zA-Z])rm` "mathrm" iAwm
\mathrm{``rv = m[1]``} $0
endsnippet

snippet `([a-zA-Z])bf` "textbf" wA
\textbf{``rv = m[1]``} $0
endsnippet

priority 100
snippet ** "star" iAm
^{*} $0
endsnippet

snippet >> ">>" iAm
\gg $0
endsnippet

snippet << "<<" iAm
\ll $0
endsnippet

snippet ind "indicator function" iAm
\mathbbm{1}_{$1} $0
endsnippet

snippet mean "Expectation" iAm
\expectation{$1}{$2} $0
endsnippet

snippet vari "Variation" iAm
\variance{$1}{$2} $0
endsnippet

snippet prob "Probability" iAm
\probability{$1}{$2} $0
endsnippet

snippet cov "Covariance" iAm
\mathrm{Cov}\left[ $1 \right] $0 
endsnippet

snippet range "i = 1, \ldots, n" wm
${1:i} = ${2:1}, \ldots, ${3:n}$0
endsnippet

snippet bino "binomial coefficient" iAm
\binom{$1}{$2}$0
endsnippet

snippet ems "empty set" wiAm
\varnothing $0
endsnippet

snippet emph "emph" wiA
\emph{$1}$0
endsnippet

snippet begg "begin custom env" wiA
\begin{${1:eg}}
	$0
\end{${1:eg}}
endsnippet

snippet := "definition in math" iAm
\coloneqq $0
endsnippet

snippet =: "definition in math" iAm
\eqqcolon $0
endsnippet

snippet opmin "Optimization problem" wA
\begin{align*}
  \min~ & ${1:c^Tx}    \\\\
        & ${2:Ax = b}  \\\\
        & ${3:x\geq 0}
\end{align*}
$0
endsnippet

snippet opmax "Optimization problem" wA
\begin{align*}
  \max~ & ${1:c^Tx}    \\\\
        & ${2:Ax = b}  \\\\
        & ${3:x\geq 0}
\end{align*}
$0
endsnippet

snippet opPD "Optimization problem with primal & dual" wA
\[
	\begin{alignedat}{5}
		\min~&c^{T}x\qquad\qquad&&\max ~&&y^{T}b\\\\
		&Ax = b 				&&		&&y^{T}A\leq c^{T}\\\\
		(P)\quad	&x\geq  0 	&&(D)\quad&&
	\end{alignedat}.
\]$0
endsnippet

snippet salg "sigma-algebra" iwA
\(\sigma\)-algebra $0
endsnippet

priority 200
snippet idd "identity" iwAm
\identity_{$1} $0
endsnippet

snippet cmp "\circ" iAwm
\circ $0
endsnippet

snippet quo "\quotient" iAm 
\quotient{$1}{$2} $0
endsnippet

snippet `\|\_` "\at" iAm 
\at{$1}{$2}{$3} $0
endsnippet

snippet hpr "\hyperref[]{}" iA
\hyperref[$1]{$2} $0
endsnippet

snippet vph "same level of underbrace" iAwm
\vphantom{$1} $0
endsnippet

snippet hom "homorphism" iAwm
\Homomorphism $0
endsnippet

snippet obj "object" iAwm
\Object $0
endsnippet

snippet mor "morphism" iAwm
\Morphism $0
endsnippet

snippet cr "mathscr" iAwm
\mathscr{$1} $0
endsnippet

snippet __ "\underline{}" iAw
\underline{$1} $0
endsnippet

snippet fk "\footnotemark" iAwm
\footnotemark $0
endsnippet

snippet qed "\qed" iAw
\qed 

endsnippet